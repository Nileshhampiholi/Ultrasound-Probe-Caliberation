function H = forwardEndeffector(thetas)

theta1 = thetas(1);
theta2 = thetas(2);
theta3 = thetas(3);
theta4 = thetas(4);
theta5 = thetas(5);
theta6 = thetas(6);

% Devanit-Hartenberg values for the UR5 given in millimeters
d = UR5.dh.ds;
a = UR5.dh.as;
% X = l2*cosd(theta1+theta2)+l1*cosd(theta1);
% Y = l2*sind(theta1+theta2)+l1*sind(theta1);

% (Unfortunalety) Calculate the forward kinematics by hand.. we dont need the robserver
% here, it would cost too much time anyway

%FIXME since theata1,2,3... is a 5-dim- rectangle, all expressions are not
% evaluable
% *T = ((d5*(s1*c234-c1*s234))/2.0 - (d5*(s1*c234+c1*s234))/2.0 - 
%           d4*s1 + (d6*(c1*c234-s1*s234)*s5)/2.0 + (d6*(c1*c234+s1*s234)*s5)/2.0 - 
%           a2*c1*c2 - d6*c5*s1 - a3*c1*c2*c3 + a3*c1*s2*s3); T++;
          
px = -( d(5)*(sind(theta1)*cosd(theta2+theta3+theta4) - cosd(theta1)*sind(theta2+theta3+theta4)))/2.0 ...
    +( d(5)*(sind(theta1)*cosd(theta2+theta3+theta4) + cosd(theta1)*sind(theta2+theta3+theta4)))/2.0 ...
    +  d(4)*sind(theta1) ...
    -( d(6)*(cosd(theta1)*cosd(theta2+theta3+theta4) - sind(theta1)*sind(theta2+theta3+theta4)))/2.0 ...
    -( d(6)*(cosd(theta1)*cosd(theta2+theta3+theta4) + sind(theta1)*sind(theta2+theta3+theta4)))/2.0 ...
    + a(2)*cosd(theta1)*cosd(theta2) ...
    + d(6)*cosd(theta5)*sind(theta1) ...
    + a(3)*cosd(theta1)*cosd(theta2)*cosd(theta3) ...
    - a(3)*cosd(theta1)*sind(theta2)*sind(theta3);

py =  -( d(5)*(cosd(theta1)*cosd(theta2+theta3+theta4) - sind(theta1)*sind(theta2+theta3+theta4)))/2.0 ...
     +( d(5)*(cosd(theta1)*cosd(theta2+theta3+theta4) + sind(theta1)*sind(theta2+theta3+theta4)))/2.0 ...
     -  d(4)*cosd(theta1) ...
     -( d(6)*(sind(theta1)*cosd(theta2+theta3+theta4) + cosd(theta1)*sind(theta2+theta3+theta4)))/2.0 ...
     -( d(6)*(sind(theta1)*cosd(theta2+theta3+theta4) - cosd(theta1)*sind(theta2+theta3+theta4)))/2.0 ...
     - d(6)*cosd(theta1)*cosd(theta5) ...
     + a(2)*cosd(theta2)*sind(theta1) ...
     + a(3)*cosd(theta2)*cosd(theta3)*sind(theta1) ...
     - a(3)*sind(theta1)*sind(theta2)*sind(theta3);
 
pz = d(1) + (d(6)*(cosd(theta2+theta3+theta4)*cosd(theta5) - sind(theta2+theta3+theta4)*sind(theta5)))/2.0 ...
    + a(3)*(sind(theta2)*cosd(theta3) + cosd(theta2)*sind(theta3)) + a(2)*sind(theta2) - (d(6)*(cosd(theta2+theta3+theta4)*cosd(theta5) ...
    + sind(theta2+theta3+theta4)*sind(theta5)))/2.0 - d(5)*cosd(theta2+theta3+theta4);
 
nx = cosd(theta6)*(sind(theta1)*sind(theta5) + ((cosd(theta1)*cosd(theta2+theta3+theta4) ...
    - sind(theta1)*sind(theta2+theta3+theta4))*cosd(theta5))/2.0 + ((cosd(theta1)*cosd(theta2+theta3+theta4) ...
    + sind(theta1)*sind(theta2+theta3+theta4))*cosd(theta5))/2.0) ...
    - (sind(theta6)*((sind(theta1)*cosd(theta2+theta3+theta4) + cosd(theta1)*sind(theta2+theta3+theta4)) ...
    - (sind(theta1)*cosd(theta2+theta3+theta4) ...
    - cosd(theta1)*sind(theta2+theta3+theta4))))/2.0;
ny = cosd(theta6)*(((sind(theta1)*cosd(theta2+theta3+theta4) ...
    + cosd(theta1)*sind(theta2+theta3+theta4))*cosd(theta5))/2.0-cosd(theta1)*sind(theta5) ...
    + ((sind(theta1)*cosd(theta2+theta3+theta4) -cosd(theta1)*sind(theta2+theta3+theta4))*cosd(theta5))/2.0) ...
    + sind(theta6)*((cosd(theta1)*cosd(theta2+theta3+theta4) - sind(theta1)*sind(theta2+theta3+theta4))/2.0 ...
    -(cosd(theta1)*cosd(theta2+theta3+theta4) + sind(theta1)*sind(theta2+theta3+theta4))/2.0);
nz = (sind(theta2+theta3+theta4)*cosd(theta6) + cosd(theta2+theta3+theta4)*sind(theta6))/2.0 ...
    + sind(theta2+theta3+theta4)*cosd(theta5)*cosd(theta6) - (sind(theta2+theta3+theta4)*cosd(theta6) ...
    - cosd(theta2+theta3+theta4)*sind(theta6))/2.0;
ox = -(cosd(theta6)*((sind(theta1)*cosd(theta2+theta3+theta4) + cosd(theta1)*sind(theta2+theta3+theta4)) ...
    - (sind(theta1)*cosd(theta2+theta3+theta4) - cosd(theta1)*sind(theta2+theta3+theta4))))/2.0 ...
    - sind(theta6)*(sind(theta1)*sind(theta5) + ((cosd(theta1)*cosd(theta2+theta3+theta4) ...
    - sind(theta1)*sind(theta2+theta3+theta4))*cosd(theta5))/2.0 + ((cosd(theta1)*cosd(theta2+theta3+theta4) ...
    + sind(theta1)*sind(theta2+theta3+theta4))*cosd(theta5))/2.0);
oy = cosd(theta6)*((cosd(theta1)*cosd(theta2+theta3+theta4) - sind(theta1)*sind(theta2+theta3+theta4))/2.0 ...
    - (cosd(theta1)*cosd(theta2+theta3+theta4) + sind(theta1)*sind(theta2+theta3+theta4))/2.0) ...
    - sind(theta6)*(((sind(theta1)*cosd(theta2+theta3+theta4) ... 
    + cosd(theta1)*sind(theta2+theta3+theta4))*cosd(theta5))/2.0 - cosd(theta1)*sind(theta5) ...
    + ((sind(theta1)*cosd(theta2+theta3+theta4) - cosd(theta1)*sind(theta2+theta3+theta4))*cosd(theta5))/2.0);
oz = (cosd(theta2+theta3+theta4)*cosd(theta6) + sind(theta2+theta3+theta4)*sind(theta6))/2.0 ...
    + (cosd(theta2+theta3+theta4)*cosd(theta6) - sind(theta2+theta3+theta4)*sind(theta6))/2.0 ...
    - sind(theta2+theta3+theta4)*cosd(theta5)*sind(theta6);
ax = cosd(theta5)*sind(theta1) - ((cosd(theta1)*cosd(theta2+theta3+theta4) ...
    - sind(theta1)*sind(theta2+theta3+theta4))*sind(theta5))/2.0 - ((cosd(theta1)*cosd(theta2+theta3+theta4) ...
    + sind(theta1)*sind(theta2+theta3+theta4))*sind(theta5))/2.0;
ay = -cosd(theta1)*cosd(theta5) - ((sind(theta1)*cosd(theta2+theta3+theta4) ...
    + cosd(theta1)*sind(theta2+theta3+theta4))*sind(theta5))/2.0 + ((cosd(theta1)*sind(theta2+theta3+theta4) ...
    - sind(theta1)*cosd(theta2+theta3+theta4))*sind(theta5))/2.0;
az = (cosd(theta2+theta3+theta4)*cosd(theta5) - sind(theta2+theta3+theta4)*sind(theta5))/2.0 ...
    - (cosd(theta2+theta3+theta4)*cosd(theta5) + sind(theta2+theta3+theta4)*sind(theta5))/2.0;

% 
H = [nx ox ax px;
     ny oy ay py;
     nz oz az pz];
end

